# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from grakn.service.Session.autogenerated import Session_pb2 as grakn_dot_service_dot_Session_dot_autogenerated_dot_Session__pb2


class SessionServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.transaction = channel.stream_stream(
        '/session.SessionService/transaction',
        request_serializer=grakn_dot_service_dot_Session_dot_autogenerated_dot_Session__pb2.Transaction.Req.SerializeToString,
        response_deserializer=grakn_dot_service_dot_Session_dot_autogenerated_dot_Session__pb2.Transaction.Res.FromString,
        )


class SessionServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def transaction(self, request_iterator, context):
    """Represents a full transaction. The stream of `Transaction.Req`s must begin with a `Open` message.
    When the call is completed, the transaction will always be closed, with or without a `Commit` message.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SessionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'transaction': grpc.stream_stream_rpc_method_handler(
          servicer.transaction,
          request_deserializer=grakn_dot_service_dot_Session_dot_autogenerated_dot_Session__pb2.Transaction.Req.FromString,
          response_serializer=grakn_dot_service_dot_Session_dot_autogenerated_dot_Session__pb2.Transaction.Res.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'session.SessionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
